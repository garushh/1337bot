import os
import json
from datetime import datetime
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
import matplotlib.pyplot as plt

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.environ.get("PORT", 8443))

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–ª–ª–æ–≤
SCORES_FILE = "scores.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_scores():
    if os.path.exists(SCORES_FILE):
        with open(SCORES_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def save_scores(scores):
    with open(SCORES_FILE, "w", encoding="utf-8") as f:
        json.dump(scores, f, ensure_ascii=False, indent=2)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ ‚Äî 13:37
def is_1337():
    now = datetime.now()
    return now.hour == 13 and now.minute == 37

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    chat_id = str(update.effective_chat.id)
    user_id = str(user.id)
    username = user.full_name

    if not is_1337():
        return  # –ù–µ 13:37 ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

    scores = load_scores()
    if chat_id not in scores:
        scores[chat_id] = {}

    today = datetime.now().strftime("%Y-%m-%d")
    if today in scores[chat_id].get(user_id, {}):
        return  # –£–∂–µ –ø–æ–ª—É—á–∞–ª –±–∞–ª–ª —Å–µ–≥–æ–¥–Ω—è

    scores[chat_id].setdefault(user_id, {})[today] = username
    save_scores(scores)

    count = len(scores[chat_id][user_id])
    await update.message.reply_text(f"üéØ {username}, —Ç—ã –ø–æ–ª—É—á–∏–ª 1 –±–∞–ª–ª! –í—Å–µ–≥–æ –±–∞–ª–ª–æ–≤: {count}")

# –ö–æ–º–∞–Ω–¥–∞ /rating
async def show_scores(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)
    scores = load_scores()

    if chat_id not in scores or not scores[chat_id]:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –±–∞–ª–ª–æ–≤ üí§")
        return

    user_scores = {
        list(data.values())[0]: len(data)
        for data in scores[chat_id].values()
    }

    sorted_scores = sorted(user_scores.items(), key=lambda x: x[1], reverse=True)
    lines = [f"{i+1}. {name} ‚Äî {pts} –±–∞–ª–ª–æ–≤" for i, (name, pts) in enumerate(sorted_scores)]
    await update.message.reply_text("\n".join(lines))

# –ö–æ–º–∞–Ω–¥–∞ /chart
async def show_graph(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.effective_chat.id)
    scores = load_scores()

    if chat_id not in scores or not scores[chat_id]:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—á–µ–≥–æ –ø–æ–∫–∞–∑–∞—Ç—å üìâ")
        return

    names = []
    points = []
    for uid, entries in scores[chat_id].items():
        name = list(entries.values())[0]
        names.append(name)
        points.append(len(entries))

    fig, ax = plt.subplots()
    ax.barh(names, points)
    ax.set_xlabel("–ë–∞–ª–ª—ã")
    ax.set_title("üèÜ –†–µ–π—Ç–∏–Ω–≥ 13:37")

    plt.tight_layout()
    chart_path = "/tmp/chart.png"
    plt.savefig(chart_path)
    plt.close()

    with open(chart_path, "rb") as img:
        await update.message.reply_photo(photo=img)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ webhook
async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("rating", show_scores))
    app.add_handler(CommandHandler("chart", show_graph))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

    print(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ webhook: {WEBHOOK_URL}")

    await app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        webhook_url=WEBHOOK_URL,
    )

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
